import React from "react";
import {Modal as ModalANTD, Input, Select,} from 'antd';
import {getCategories, getEditPhone} from "../../selectors";
import {connect} from "react-redux";
import {fetchCategories, fetchPhones} from "actions";
import UploadFile from "component/uploadFile"
import {uploadFileApi} from "api";
const { Option } = Select;
const { TextArea } = Input;

function getBase64(img, callback) {
    const reader = new FileReader();
    reader.addEventListener('load', () => callback(reader.result));
    reader.readAsDataURL(img);
}

class Modal extends React.Component {
    constructor(props) {
        super(props);
        this.state = {
            phone: {
                name: '',
                id: '',
                cpu: '',
                camera: '',
                size: '',
                weight: '',
                display: '',
                battery: '',
                memory: '',
                description: '',
                price: 100,
                categoryId: '',
            },
            loading: false,
            imageUrl: ''
        }
    }

    componentDidMount() {
        this.props.fetchCategories()
    }

    componentDidUpdate(prevProps, prevState) {
        const {editOnePhone = {}} = this.props;
        const {editOnePhone: editOnePhonePrev = {}} = prevProps;
        if (editOnePhone.id !== editOnePhonePrev.id) {
            this.setState({
                phone: {
                    ...this.state.phone,
                    ...editOnePhone,
                }
            });
            this.props.fetchPhones()
        }
    }

    toggleEdit = () => {
        const {onOk, editPhoneId} = this.props;
        editPhoneId(this.state.phone.id, this.state.phone);
        onOk();
        this.setState({
            imageUrl: '',
            loading: false,
        })
    };

    handleChangeEvent = (e) => {
        this.setState({
            phone: {
                ...this.state.phone,
                [e.target.name]: e.target.value
            }
        });
    };

    handleChangeSelect = (value) => {
        this.setState({
            phone: {
                ...this.state.phone,
                categoryId: value,
            }
        });
    };

    handleChangeUpload = info => {
        const { uploadFileApi } = this.props;
        if (info.file.status === 'done') {
            uploadFileApi(info.file.originFileObj);
            getBase64(info.file.originFileObj, imageUrl =>
                this.setState({
                    phone: {
                        ...this.state.phone,
                        image: imageUrl
                    },
                    imageUrl: imageUrl,
                    loading: false,
                }),
            );
        }
    };

    renderFields = () => {
        return (
            Object.keys(this.state.phone).filter(word => word !== 'id').filter(word => word !== 'description').filter(word => word !== 'categoryId').slice(0,-2).map((key) =>
                 <div className='column' key={key}>
                     <div className='phone-title'>
                         <p>{key}</p>
                     </div>
                     <div className='phone-info'>
                         <Input
                             type="text"
                             value={this.state.phone[key]}
                             onChange={this.handleChangeEvent}
                             name={key}
                         />
                     </div>
                 </div>
            )
        )
    };

    render() {
        const {categoryId} = this.state.phone;
        const {categories = []} = this.props;
        return (
            <ModalANTD
                title="Edit Phone"
                visible={this.props.visible}
                onOk={() => this.toggleEdit()}
                onCancel={this.props.onCancel}
            >
                <form>
                    <div className='inputWrapper'>
                        {this.renderFields()}
                        <div className='phone-title'>
                            <p>category</p>
                        </div>
                        <div className='phone-info'>
                            <Select value={categoryId} className='select-category' onChange={this.handleChangeSelect}>
                                {
                                    categories.map((data, index) =>
                                        <Option value={data.id} key={index} >{data.name}</Option>
                                    )
                                }
                            </Select>
                        </div>
                        <div className='phone-title'>
                            <p>description</p>
                        </div>
                        <div className='phone-info'>
                            <TextArea
                                rows={6}
                                value={this.state.phone.description}
                                onChange={this.handleChangeEvent}
                                name='description'
                            />
                        </div>
                        <div className='phone-title'>
                            <p>upload photo</p>
                        </div>
                        <div className='phone-info'>
                            <UploadFile
                                imageUrl={this.state.imageUrl}
                                handleChangeUpload={this.handleChangeUpload}
                                loading={this.state.loading}
                            />
                        </div>
                    </div>
                </form>
            </ModalANTD>
        )
    }
}
const mapStateToProps = (state, ownProps) => ({
    editOnePhone: getEditPhone(state, ownProps),
    categories: getCategories(state),
});

const mapDispatchToProps = {
    fetchPhones,
    fetchCategories,
    uploadFileApi
};

export default connect(
    mapStateToProps,
    mapDispatchToProps
)(Modal)