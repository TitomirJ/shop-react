import * as actionType from 'actionTypes';

const initialState = {
};

export default (state = initialState, {type , payload, data, id}) => {
    switch (type) {
        case actionType.FETCH_PHONES_SUCCESS:
            let newObj = Object.fromEntries(
                Object.entries(payload).map(([key, value]) => [key = value.id, value])
            );
            return state = newObj;

        case actionType.LOAD_MORE_PHONES_SUCCESS:
            let moreValues = Object.fromEntries(
                Object.entries(payload).map(([key, value]) => [key = value.id, value])
            );
            return state = moreValues;

        case  actionType.FETCH_PHONE_BY_ID_SUCCESS:
            return {
                ...state,
                [payload.id]: payload
            };

        case actionType.GET_EDIT_PHONE_BY_ID_SUCCESS:
            return {
                ...state,
                id: payload,
                data: data
            };

        case actionType.ADD_PHONE_SUCCESS:
            return {
                ...state,
                [id]: payload
            };

        case actionType.DELETE_PHONE_SUCCESS:
            Object.filter = (obj, predicate) =>
                Object.assign(...Object.keys(obj)
                    .filter( key => predicate(obj[key]) )
                    .map( key => ({ [key]: obj[key] }) ) );
            let filtered = Object.filter(state, item => item.id !== payload);
            return state = filtered;


        default: return state
    }
}